#!/bin/bash

# Copyright (C) 2019 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause

rngd -r /dev/urandom

/sbin/udevadm hwdb --update &&
/sbin/udevd --debug --daemon

export CONSOLE_OUTPUT="/dev/kmsg"

sleep 3

kernel_params=$(cat /proc/cmdline)

if [[ $kernel_params == *" ntp="* ]]; then
  tmp="${kernel_params##* ntp=}"
  export param_ntp="${tmp%% *}"
else
  export param_ntp="us.pool.ntp.org"
fi

echo "Updating system time..." 2>&1 | tee -a ${CONSOLE_OUTPUT}
ntpd -d -N -q -n -p ${param_ntp} 2>&1 | tee -a ${CONSOLE_OUTPUT}

echo "Discovering hardware..." 2>&1 | tee -a ${CONSOLE_OUTPUT}
for f in $(ls /sys/bus/*/devices/*/modalias); do
  if [ -f $f ]; then
    modprobe -abq $(cat $f) >/dev/null 2>&1
  fi
done

sleep 1

for f in $(ls /sys/bus/*/devices/*/modalias); do
  if [ -f $f ]; then
    modprobe -abq $(cat $f) >/dev/null 2>&1
  fi
done

if [[ $kernel_params = *"httpserver="* ]]; then
  tmp="${kernel_params##*httpserver=}"
  param_httpserver="${tmp%% *}"
fi

if [[ $kernel_params = *" proxy="* ]]; then
  tmp="${kernel_params##* proxy=}"
  param_proxy="${tmp%% *}"

  export http_proxy=${param_proxy}
  export https_proxy=${param_proxy}
  export no_proxy="localhost,127.0.0.1,${param_httpserver}"
  export HTTP_PROXY=${param_proxy}
  export HTTPS_PROXY=${param_proxy}
  export NO_PROXY="localhost,127.0.0.1,${param_httpserver}"
fi

if [[ $kernel_params = *" dynamicprofile="* ]]; then
  tmp="${kernel_params##* dynamicprofile=}"
  export param_dynamicprofile="${tmp%% *}"
fi

echo "Cmdline: $kernel_params" 2>&1 | tee -a ${CONSOLE_OUTPUT}

if [[ $param_dynamicprofile == 'true' ]]; then
  echo "DYNAMIC PROFILE ACTIVE!! Collecting hardware information" 2>&1 | tee -a ${CONSOLE_OUTPUT}
  /opt/bootstrap/profile_request
fi

if [ $(wget http://${param_httpserver}:5557/v2/_catalog -O-) ] 2>/dev/null; then
    export REGISTRY_MIRROR="--registry-mirror=http://${param_httpserver}:5557"
elif [ $(wget http://${param_httpserver}:5000/v2/_catalog -O-) ] 2>/dev/null; then
    export REGISTRY_MIRROR="--registry-mirror=http://${param_httpserver}:5000"
fi

iptables -L  >/dev/null 2>&1
if [ $? = 0 ]; then
    # /usr/local/bin/docker-init /usr/local/bin/dockerd &
    /usr/local/bin/dockerd ${REGISTRY_MIRROR} &
else
    /usr/local/bin/dockerd --iptables=false ${REGISTRY_MIRROR} &
fi

while (! docker stats --no-stream > /dev/null ); do
  # Docker takes a few seconds to initialize
  echo "Waiting for Docker to launch..." 2>&1 | tee -a ${CONSOLE_OUTPUT}
  sleep 3
done

/opt/bootstrap/init

supervisord -n
