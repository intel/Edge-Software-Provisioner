#!/bin/bash

# Copyright (C) 2019 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause

source /opt/bootstrap/functions

export CONSOLE_OUTPUT="/dev/kmsg"

kernel_params=$(cat /proc/cmdline)
if [[ $kernel_params = *"bootstrap="* ]]; then
	tmp="${kernel_params##*bootstrap=}"
	param_bootstrap="${tmp%% *}"
else
	clear
	echo "" 2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo "'bootstrap' kernel parameter missing!" 2>&1 | tee -a ${CONSOLE_OUTPUT}
	sleep 30
	# reboot
fi

if [[ $kernel_params = *"httpserver="* ]]; then
	tmp="${kernel_params##*httpserver=}"
	param_httpserver="${tmp%% *}"
else
	clear
	echo "" 2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo "'httpserver' kernel parameter missing!" 2>&1 | tee -a ${CONSOLE_OUTPUT}
	sleep 30
	# reboot
fi

if [[ $kernel_params = *" proxy="* ]]; then
  tmp="${kernel_params##* proxy=}"
  param_proxy="${tmp%% *}"

  export http_proxy=${param_proxy}
  export https_proxy=${param_proxy}
  export no_proxy="localhost,127.0.0.1,${param_httpserver}"
  export HTTP_PROXY=${param_proxy}
  export HTTPS_PROXY=${param_proxy}
  export NO_PROXY="localhost,127.0.0.1,${param_httpserver}"
fi

if [[ $kernel_params == *" noproxy="* ]]; then
	tmp="${kernel_params##* noproxy=}"
	export param_noproxy="${tmp%% *}"
	export no_proxy="${param_noproxy},${param_httpserver}"
	export NO_PROXY="${param_noproxy},${param_httpserver}"
fi

if [[ $kernel_params = *"token="* ]]; then
	tmp="${kernel_params##*token=}"
	param_token="${tmp%% *}"
fi

if [[ $kernel_params = *" logserver="* ]]; then
	tmp="${kernel_params##*logserver=}"
	param_logserver="${tmp%% *}"
fi

if [ $( nc -vz ${param_httpserver} 80; echo $?; ) -ne 0 ] && [ $( nc -vz ${param_httpserver} 443; echo $?; ) -ne 0 ]; then
	echo ""  2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo "No routable network interface found." 2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo -e "Routes:\n$(ip route show)\n\nLANs:\n$(ip -o -4 addr list)\n" 2>&1 | tee -a ${CONSOLE_OUTPUT}

	if [ -d "/sys/class/ieee80211" ] && [ "$(ls -A /sys/class/ieee80211 2>/dev/null )" ]; then
		if [ -f /opt/bootstrap/init.done ]; then
			rm /opt/bootstrap/init.done
		fi

		touch /opt/bootstrap/wifi-scan.run
		until [ -f /opt/bootstrap/wifi-scan.done ]; do
			echo "Waiting for wifi-scan to finish." 2>&1 | tee -a ${CONSOLE_OUTPUT}
			sleep 5
		done
	fi
fi
touch /opt/bootstrap/init.done

if [ ! -z ${param_logserver+x} ]; then
  
	if ( ! docker pull intel/esp-logging-agent > /dev/null 2>&1 ); then
		if (wget --no-check-certificate --method=HEAD https://${param_httpserver}/containers/intel_esp-logging-agent.tar.gz 2>&1 | grep "200 OK"); then
			wget --no-check-certificate -O- https://${param_httpserver}/containers/intel_esp-logging-agent.tar.gz | docker load
		fi
	fi

	if docker images | grep intel/esp-logging-agent; then
		if [ ! -z ${param_proxy+x} ]; then
			docker run -d \
				-v /dev:/dev \
				-v /tmp:/tmp \
				-e http_proxy=${http_proxy} \
				-e https_proxy=${https_proxy} \
				-e no_proxy=${no_proxy} \
				-e HTTP_PROXY=${HTTP_PROXY} \
				-e HTTPS_PROXY=${HTTPS_PROXY} \
				-e NO_PROXY=${NO_PROXY} \
				-e LOGGING_SERVER=${param_logserver} \
				--privileged \
				--restart=always \
				--name provisioning_logging_agent \
				intel/esp-logging-agent
		else
			docker run -d \
				-v /dev:/dev \
				-v /tmp:/tmp \
				-e LOGGING_SERVER=${param_logserver} \
				--privileged \
				--restart=always \
				--name provisioning_logging_agent \
				intel/esp-logging-agent
		fi
	fi
fi

if [ $( nc -vz ${param_httpserver} 80; echo $?; ) -ne 0 ] && [ $( nc -vz ${param_httpserver} 443; echo $?; ) -ne 0 ]; then
	echo "Unable to connect to ${param_httpserver} and the network is up.  Verify the service is up and running." 2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo "" 2>&1 | tee -a ${CONSOLE_OUTPUT}
	echo -e "IP Address:\n$(ip -o -4 addr list $(ip route show 0.0.0.0/0 | awk '{print $5}') | head -1 | awk '{print $4}' | cut -d/ -f1)\n\nRoutes:\n$(ip route show)\n\nLANs:\n$(ip -o -4 addr list)\n" 2>&1 | tee -a ${CONSOLE_OUTPUT}
else
	if [ $( nc -vz ${param_httpserver} 443; echo $?; ) -eq 0 ]; then
		wget --no-check-certificate --header "Authorization: token ${param_token}" -O - ${param_bootstrap/http:/https:} 2> ${CONSOLE_OUTPUT} | bash -s - $param_httpserver
	else
		wget --header "Authorization: token ${param_token}" -O - ${param_bootstrap/https:/http:} 2> ${CONSOLE_OUTPUT} | bash -s - $param_httpserver
	fi
fi
